{
	"definitions": {
		"ITableData": {
			"description": "",
			"properties": {},
			"type": "object",
			"additionalProperties": {}
		},
		"IStockData": {
			"description": "",
			"properties": {
				"LongName": {
					"type": "string",
					"description": ""
				},
				"Ticker": {
					"type": "string",
					"description": ""
				},
				"Industry": {
					"type": "string",
					"description": ""
				},
				"Exchange": {
					"type": "string",
					"description": ""
				},
				"Price": {
					"type": "number",
					"format": "double",
					"description": ""
				},
				"W52H": {
					"type": "number",
					"format": "double",
					"description": ""
				},
				"W52L": {
					"type": "number",
					"format": "double",
					"description": ""
				},
				"VolAvg": {
					"type": "number",
					"format": "double",
					"description": ""
				},
				"Outstanding": {
					"type": "number",
					"format": "double",
					"description": ""
				},
				"Float": {
					"type": "number",
					"format": "double",
					"description": ""
				},
				"VolDOI": {
					"type": "number",
					"format": "double",
					"description": ""
				},
				"VolPreM": {
					"type": "number",
					"format": "double",
					"description": ""
				},
				"PC": {
					"type": "number",
					"format": "double",
					"description": ""
				},
				"PremHigh": {
					"type": "number",
					"format": "double",
					"description": ""
				},
				"Open": {
					"type": "number",
					"format": "double",
					"description": ""
				},
				"HOD": {
					"type": "number",
					"format": "double",
					"description": ""
				},
				"HODTime": {
					"type": "string",
					"description": ""
				},
				"LOD": {
					"type": "number",
					"format": "double",
					"description": ""
				},
				"LODTime": {
					"type": "string",
					"description": ""
				},
				"Close": {
					"type": "number",
					"format": "double",
					"description": ""
				},
				"AH": {
					"type": "number",
					"format": "double",
					"description": ""
				}
			},
			"type": "object"
		},
		"BadRequestError": {
			"description": "Represents a BAD REQUEST error. The request could not be understood by the\nserver due to malformed syntax. The client SHOULD NOT repeat the request\nwithout modifications.",
			"properties": {
				"message": {
					"type": "string",
					"description": ""
				},
				"statusCode": {
					"type": "number",
					"format": "double",
					"description": ""
				},
				"name": {
					"type": "string",
					"description": ""
				},
				"stack": {
					"type": "string",
					"description": ""
				}
			},
			"type": "object",
			"required": [
				"message",
				"statusCode",
				"name"
			]
		}
	},
	"info": {
		"license": {
			"name": "ISC"
		},
		"title": "backend",
		"version": "1.0.0"
	},
	"paths": {
		"/parseCSV": {
			"post": {
				"operationId": "ServiceParseCSV",
				"produces": [
					"application/json"
				],
				"responses": {
					"200": {
						"description": "Ok",
						"schema": {
							"type": "array",
							"items": {
								"$ref": "#/definitions/ITableData"
							}
						}
					},
					"400": {
						"description": "Bad Request",
						"schema": {
							"$ref": "#/definitions/BadRequestError"
						}
					}
				},
				"description": "Used to Parse a CSV File",
				"consumes": [
					"multipart/form-data"
				],
				"parameters": [
					{
						"description": ": filename to parse into a reports session",
						"in": "formData",
						"name": "sourceName",
						"required": true,
						"type": "string"
					},
					{
						"description": ": File Object",
						"in": "formData",
						"name": "file",
						"required": true,
						"type": "file"
					}
				]
			}
		},
		"/stockapi/{ID}": {
			"get": {
				"operationId": "ServiceGetStockNow",
				"produces": [
					"application/json"
				],
				"responses": {
					"200": {
						"description": "Ok",
						"schema": {
							"type": "object"
						}
					},
					"400": {
						"description": "Bad Request",
						"schema": {
							"$ref": "#/definitions/BadRequestError"
						}
					}
				},
				"description": "Retrieve Stock Data Now",
				"parameters": [
					{
						"description": "",
						"in": "path",
						"name": "ID",
						"required": true,
						"type": "string"
					}
				]
			}
		},
		"/stockapi/{ID}/{date}": {
			"get": {
				"operationId": "ServiceGetStockThen",
				"produces": [
					"application/json"
				],
				"responses": {
					"200": {
						"description": "Ok",
						"schema": {
							"$ref": "#/definitions/IStockData"
						}
					},
					"400": {
						"description": "Bad Request",
						"schema": {
							"$ref": "#/definitions/BadRequestError"
						}
					}
				},
				"description": "Retrieve Stock Data Historical Data",
				"parameters": [
					{
						"description": "",
						"in": "path",
						"name": "ID",
						"required": true,
						"type": "string"
					},
					{
						"description": ": Current Date in format YYYY-MM-DD",
						"in": "path",
						"name": "date",
						"required": true,
						"type": "string"
					}
				]
			}
		},
		"/loginKeyPOST": {
			"post": {
				"operationId": "ServiceLoginKeyPOST",
				"produces": [
					"application/json"
				],
				"responses": {
					"200": {
						"description": "Ok",
						"schema": {
							"type": "string"
						}
					},
					"400": {
						"description": "Bad Request",
						"schema": {
							"$ref": "#/definitions/BadRequestError"
						}
					}
				},
				"description": "Used in Program to Determine if someone is logged in by returning ObjectId toString value of user",
				"consumes": [
					"application/json"
				],
				"parameters": [
					{
						"description": "containing attribute theData. the data contains attributes",
						"in": "body",
						"name": "body",
						"required": true,
						"schema": {
							"type": "object"
						}
					}
				]
			}
		},
		"/usernameFromKeyGET": {
			"get": {
				"operationId": "ServiceUsernameFromKeyGET",
				"produces": [
					"application/json"
				],
				"responses": {
					"200": {
						"description": "Ok",
						"schema": {
							"type": "string"
						}
					},
					"400": {
						"description": "Bad Request",
						"schema": {
							"$ref": "#/definitions/BadRequestError"
						}
					}
				},
				"description": "Get username from a key stored in browser local storage\r\n   If the key does not match with a user, nothing is returned\r\n   else the user's username is returned",
				"parameters": [
					{
						"description": ": encrypted key stored in browser local storage",
						"in": "query",
						"name": "key",
						"required": true,
						"type": "string"
					}
				]
			}
		},
		"/createAccountPost": {
			"post": {
				"operationId": "ServiceCreateAccountPost",
				"produces": [
					"application/json"
				],
				"responses": {
					"200": {
						"description": "Ok",
						"schema": {
							"type": "boolean"
						}
					},
					"400": {
						"description": "Bad Request",
						"schema": {
							"$ref": "#/definitions/BadRequestError"
						}
					}
				},
				"description": "Method creates Account",
				"consumes": [
					"application/json"
				],
				"parameters": [
					{
						"description": ": js object containing FE_KEY, username, password, fName, lName, email, phohe, bdate",
						"in": "body",
						"name": "body",
						"required": true,
						"schema": {
							"type": "object"
						}
					}
				]
			}
		},
		"/accountData": {
			"get": {
				"operationId": "ServiceAccountData",
				"produces": [
					"application/json"
				],
				"responses": {
					"200": {
						"description": "Ok",
						"schema": {
							"type": "object"
						}
					},
					"400": {
						"description": "Bad Request",
						"schema": {
							"$ref": "#/definitions/BadRequestError"
						}
					}
				},
				"description": "Get All Encrypted Personal Account Information Stored in Account Settings",
				"parameters": [
					{
						"description": ": AES Key For Front End",
						"in": "query",
						"name": "FE_KEY",
						"required": true,
						"type": "string"
					},
					{
						"description": ": encrypted key for user using application",
						"in": "query",
						"name": "key",
						"required": true,
						"type": "string"
					}
				]
			}
		},
		"/sameAccountGet": {
			"get": {
				"operationId": "ServiceSameAccountGet",
				"produces": [
					"application/json"
				],
				"responses": {
					"200": {
						"description": "Ok",
						"schema": {
							"type": "boolean"
						}
					},
					"400": {
						"description": "Bad Request",
						"schema": {
							"$ref": "#/definitions/BadRequestError"
						}
					}
				},
				"description": "",
				"parameters": [
					{
						"description": ": user key",
						"in": "query",
						"name": "key",
						"required": true,
						"type": "string"
					},
					{
						"description": ": user Account Name",
						"in": "query",
						"name": "account",
						"required": true,
						"type": "string"
					}
				]
			}
		},
		"/accountExists": {
			"get": {
				"operationId": "ServiceAccountExists",
				"produces": [
					"application/json"
				],
				"responses": {
					"200": {
						"description": "Ok",
						"schema": {
							"type": "boolean"
						}
					},
					"400": {
						"description": "Bad Request",
						"schema": {
							"$ref": "#/definitions/BadRequestError"
						}
					}
				},
				"description": "See if an account with @param newAccountName already exists",
				"parameters": [
					{
						"description": ": Possible new Account",
						"in": "query",
						"name": "newAccountName",
						"required": true,
						"type": "string"
					}
				]
			}
		},
		"/changeTheAccountName": {
			"get": {
				"operationId": "ServiceChangeTheAccountName",
				"produces": [
					"application/json"
				],
				"responses": {
					"204": {
						"description": "No content"
					},
					"400": {
						"description": "Bad Request",
						"schema": {
							"$ref": "#/definitions/BadRequestError"
						}
					}
				},
				"description": "Change an account name",
				"parameters": [
					{
						"description": ": key stored in browser local storage",
						"in": "query",
						"name": "key",
						"required": true,
						"type": "string"
					},
					{
						"description": "\" new userName",
						"in": "query",
						"name": "newAccountName",
						"required": true,
						"type": "string"
					}
				]
			}
		},
		"/changePassword": {
			"get": {
				"operationId": "ServiceChangePassword",
				"produces": [
					"application/json"
				],
				"responses": {
					"200": {
						"description": "Ok",
						"schema": {
							"type": "boolean"
						}
					},
					"400": {
						"description": "Bad Request",
						"schema": {
							"$ref": "#/definitions/BadRequestError"
						}
					}
				},
				"description": "Change a Users Password",
				"parameters": [
					{
						"description": ": key stored in browser local storage which identifies user",
						"in": "query",
						"name": "key",
						"required": true,
						"type": "string"
					},
					{
						"description": ": old password",
						"in": "query",
						"name": "oldP",
						"required": true,
						"type": "string"
					},
					{
						"description": ": new password",
						"in": "query",
						"name": "newP",
						"required": true,
						"type": "string"
					}
				]
			}
		},
		"/changeExtraAccountData": {
			"get": {
				"operationId": "ServiceChangeExtraAccountData",
				"produces": [
					"application/json"
				],
				"responses": {
					"200": {
						"description": "Ok",
						"schema": {
							"type": "boolean"
						}
					},
					"400": {
						"description": "Bad Request",
						"schema": {
							"$ref": "#/definitions/BadRequestError"
						}
					}
				},
				"description": "Change User Data",
				"parameters": [
					{
						"description": ":    Secret AES Key held by Front End of Application",
						"in": "query",
						"name": "FE_KEY",
						"required": true,
						"type": "string"
					},
					{
						"description": ":       Users Encrypted Key Which is in Local Storage of Browser",
						"in": "query",
						"name": "key",
						"required": true,
						"type": "string"
					},
					{
						"description": ": First Name to Change to",
						"in": "query",
						"name": "firstName",
						"required": true,
						"type": "string"
					},
					{
						"description": "Last Name to Change to",
						"in": "query",
						"name": "lastName",
						"required": true,
						"type": "string"
					},
					{
						"description": ":     Email Name to Change to",
						"in": "query",
						"name": "email",
						"required": true,
						"type": "string"
					},
					{
						"description": ":     Phone Number to Change to",
						"in": "query",
						"name": "phone",
						"required": true,
						"type": "string"
					},
					{
						"description": ":     BDate to Change to",
						"in": "query",
						"name": "bdate",
						"required": true,
						"type": "string"
					}
				]
			}
		},
		"/removeTheItemGet": {
			"post": {
				"operationId": "ServiceRemoveTheItemGet",
				"produces": [
					"application/json"
				],
				"responses": {
					"204": {
						"description": "No content"
					},
					"400": {
						"description": "Bad Request",
						"schema": {
							"$ref": "#/definitions/BadRequestError"
						}
					}
				},
				"description": "Remove item from collection",
				"consumes": [
					"application/json"
				],
				"parameters": [
					{
						"description": ": body obj containing:",
						"in": "body",
						"name": "body",
						"required": true,
						"schema": {
							"type": "object"
						}
					}
				]
			}
		},
		"/postTableDB": {
			"post": {
				"operationId": "ServicePostTableDB",
				"produces": [
					"application/json"
				],
				"responses": {
					"204": {
						"description": "No content"
					},
					"400": {
						"description": "Bad Request",
						"schema": {
							"$ref": "#/definitions/BadRequestError"
						}
					}
				},
				"description": "",
				"consumes": [
					"application/json"
				],
				"parameters": [
					{
						"description": ": contains\r\n{any[]} table: data Array\r\n  {string} key: user Key\r\n{string} coll: collectionName to Store Reports Data for particular session",
						"in": "body",
						"name": "body",
						"required": true,
						"schema": {
							"type": "object"
						}
					}
				]
			}
		},
		"/stockdataGet": {
			"get": {
				"operationId": "ServiceStockdataGet",
				"produces": [
					"application/json"
				],
				"responses": {
					"200": {
						"description": "Ok",
						"schema": {
							"type": "array",
							"items": {
								"type": "object"
							}
						}
					},
					"400": {
						"description": "Bad Request",
						"schema": {
							"$ref": "#/definitions/BadRequestError"
						}
					}
				},
				"description": "Userd to retrieve data from the stock collection database.\r\nAll stock files in Mongo are named with userName + \"_\" + sessionID\r\nuserName is retrieved from the key. Nothing is returned if invalid key",
				"parameters": [
					{
						"description": ": key in local storage (Front End)",
						"in": "query",
						"name": "key",
						"required": true,
						"type": "string"
					},
					{
						"description": ": collection/sessio name",
						"in": "query",
						"name": "coll",
						"required": true,
						"type": "string"
					}
				]
			}
		},
		"/userSessionsGet": {
			"get": {
				"operationId": "ServiceUserSessionsGet",
				"produces": [
					"application/json"
				],
				"responses": {
					"200": {
						"description": "Ok",
						"schema": {
							"type": "array",
							"items": {
								"type": "string"
							}
						}
					},
					"400": {
						"description": "Bad Request",
						"schema": {
							"$ref": "#/definitions/BadRequestError"
						}
					}
				},
				"description": "Get All user Sessions",
				"parameters": [
					{
						"description": ": key associated with user",
						"in": "query",
						"name": "key",
						"required": true,
						"type": "string"
					}
				]
			}
		},
		"/createNewSessionForUser": {
			"get": {
				"operationId": "ServiceCreateNewSessionForUser",
				"produces": [
					"application/json"
				],
				"responses": {
					"200": {
						"description": "Ok",
						"schema": {
							"type": "string"
						}
					},
					"400": {
						"description": "Bad Request",
						"schema": {
							"$ref": "#/definitions/BadRequestError"
						}
					}
				},
				"description": "Create a new session for a user. This adds a session for a user",
				"parameters": [
					{
						"description": ": userKey",
						"in": "query",
						"name": "key",
						"required": true,
						"type": "string"
					},
					{
						"description": "",
						"in": "query",
						"name": "collectionName",
						"required": true,
						"type": "string"
					}
				]
			}
		},
		"/removeSessionForUser": {
			"get": {
				"operationId": "ServiceRemoveSessionForUser",
				"produces": [
					"application/json"
				],
				"responses": {
					"200": {
						"description": "Ok",
						"schema": {
							"type": "string"
						}
					},
					"400": {
						"description": "Bad Request",
						"schema": {
							"$ref": "#/definitions/BadRequestError"
						}
					}
				},
				"description": "Remove Session For User (Report)",
				"parameters": [
					{
						"description": ": userKey",
						"in": "query",
						"name": "key",
						"required": true,
						"type": "string"
					},
					{
						"description": ": user session to be removed",
						"in": "query",
						"name": "session",
						"required": true,
						"type": "string"
					}
				]
			}
		},
		"/changeSessionName": {
			"get": {
				"operationId": "ServiceChangeSessionName",
				"produces": [
					"application/json"
				],
				"responses": {
					"200": {
						"description": "Ok",
						"schema": {
							"type": "boolean"
						}
					},
					"400": {
						"description": "Bad Request",
						"schema": {
							"$ref": "#/definitions/BadRequestError"
						}
					}
				},
				"description": "Change a Session/Report File name",
				"parameters": [
					{
						"description": ": userKey",
						"in": "query",
						"name": "key",
						"required": true,
						"type": "string"
					},
					{
						"description": ": current SessionName\n: new SessionName",
						"in": "query",
						"name": "sid",
						"required": true,
						"type": "string"
					},
					{
						"description": "",
						"in": "query",
						"name": "newSid",
						"required": true,
						"type": "string"
					}
				]
			}
		}
	},
	"swagger": "2.0",
	"securityDefinitions": {
		"api_key": {
			"type": "apiKey",
			"name": "access_token",
			"in": "query"
		}
	},
	"consumes": [
		"application/json"
	],
	"produces": [
		"application/json"
	]
}